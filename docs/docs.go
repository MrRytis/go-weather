// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login and get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/model.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to login user",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register new user and when use login endpoint to get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/model.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cron/add": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add cron job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron"
                ],
                "summary": "Add cron job",
                "parameters": [
                    {
                        "description": "Cron job details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CronJobRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cron added",
                        "schema": {
                            "$ref": "#/definitions/model.CronResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add job",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cron/start": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Start cron jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron"
                ],
                "summary": "Start cron jobs",
                "responses": {
                    "200": {
                        "description": "Cron started",
                        "schema": {
                            "$ref": "#/definitions/model.CronResponse"
                        }
                    }
                }
            }
        },
        "/cron/stop": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Stop cron jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron"
                ],
                "summary": "Stop cron jobs",
                "responses": {
                    "200": {
                        "description": "Cron stopped",
                        "schema": {
                            "$ref": "#/definitions/model.CronResponse"
                        }
                    }
                }
            }
        },
        "/weather/{city}/history": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get historical weather for city",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get historical weather for city",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name (allowed: Vilnius, Kaunas, Klaipeda)",
                        "name": "city",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Historical weather",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.WeatherResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "City is not supported",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/weather/{city}/now": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get current weather for city",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get current weather for city",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name (allowed: Vilnius, Kaunas, Klaipeda)",
                        "name": "city",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current weather",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.WeatherResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "City is not supported",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpUtils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httpUtils.Error": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "httpUtils.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/httpUtils.Error"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.AuthRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.CronJobRequest": {
            "type": "object",
            "required": [
                "job"
            ],
            "properties": {
                "job": {
                    "type": "string",
                    "example": "weather"
                },
                "spec": {
                    "type": "string",
                    "example": "@every 3h"
                }
            }
        },
        "model.CronResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.LoginResponse": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.WeatherResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "clouds": {
                    "type": "integer"
                },
                "feels_like": {
                    "type": "number"
                },
                "humidity": {
                    "type": "integer"
                },
                "precipitation": {
                    "type": "integer"
                },
                "pressure": {
                    "type": "number"
                },
                "provider": {
                    "type": "string"
                },
                "temp": {
                    "type": "number"
                },
                "weather": {
                    "type": "string"
                },
                "wind_deg": {
                    "type": "integer"
                },
                "wind_speed": {
                    "type": "number"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"https"},
	Title:            "Go Weather API",
	Description:      "This is a sample weather API server written in Go.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
